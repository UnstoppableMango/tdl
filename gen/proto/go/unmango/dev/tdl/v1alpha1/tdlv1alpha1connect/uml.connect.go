// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: unmango/dev/tdl/v1alpha1/uml.proto

package tdlv1alpha1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1alpha1 "github.com/unstoppablemango/tdl/gen/proto/go/unmango/dev/tdl/v1alpha1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// UmlServiceName is the fully-qualified name of the UmlService service.
	UmlServiceName = "unmango.dev.tdl.v1alpha1.UmlService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// UmlServiceFromProcedure is the fully-qualified name of the UmlService's From RPC.
	UmlServiceFromProcedure = "/unmango.dev.tdl.v1alpha1.UmlService/From"
	// UmlServiceGenProcedure is the fully-qualified name of the UmlService's Gen RPC.
	UmlServiceGenProcedure = "/unmango.dev.tdl.v1alpha1.UmlService/Gen"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	umlServiceServiceDescriptor    = v1alpha1.File_unmango_dev_tdl_v1alpha1_uml_proto.Services().ByName("UmlService")
	umlServiceFromMethodDescriptor = umlServiceServiceDescriptor.Methods().ByName("From")
	umlServiceGenMethodDescriptor  = umlServiceServiceDescriptor.Methods().ByName("Gen")
)

// UmlServiceClient is a client for the unmango.dev.tdl.v1alpha1.UmlService service.
type UmlServiceClient interface {
	From(context.Context) *connect.ClientStreamForClient[v1alpha1.FromRequest, v1alpha1.FromResponse]
	Gen(context.Context, *connect.Request[v1alpha1.GenRequest]) (*connect.ServerStreamForClient[v1alpha1.GenResponse], error)
}

// NewUmlServiceClient constructs a client for the unmango.dev.tdl.v1alpha1.UmlService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewUmlServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) UmlServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &umlServiceClient{
		from: connect.NewClient[v1alpha1.FromRequest, v1alpha1.FromResponse](
			httpClient,
			baseURL+UmlServiceFromProcedure,
			connect.WithSchema(umlServiceFromMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		gen: connect.NewClient[v1alpha1.GenRequest, v1alpha1.GenResponse](
			httpClient,
			baseURL+UmlServiceGenProcedure,
			connect.WithSchema(umlServiceGenMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// umlServiceClient implements UmlServiceClient.
type umlServiceClient struct {
	from *connect.Client[v1alpha1.FromRequest, v1alpha1.FromResponse]
	gen  *connect.Client[v1alpha1.GenRequest, v1alpha1.GenResponse]
}

// From calls unmango.dev.tdl.v1alpha1.UmlService.From.
func (c *umlServiceClient) From(ctx context.Context) *connect.ClientStreamForClient[v1alpha1.FromRequest, v1alpha1.FromResponse] {
	return c.from.CallClientStream(ctx)
}

// Gen calls unmango.dev.tdl.v1alpha1.UmlService.Gen.
func (c *umlServiceClient) Gen(ctx context.Context, req *connect.Request[v1alpha1.GenRequest]) (*connect.ServerStreamForClient[v1alpha1.GenResponse], error) {
	return c.gen.CallServerStream(ctx, req)
}

// UmlServiceHandler is an implementation of the unmango.dev.tdl.v1alpha1.UmlService service.
type UmlServiceHandler interface {
	From(context.Context, *connect.ClientStream[v1alpha1.FromRequest]) (*connect.Response[v1alpha1.FromResponse], error)
	Gen(context.Context, *connect.Request[v1alpha1.GenRequest], *connect.ServerStream[v1alpha1.GenResponse]) error
}

// NewUmlServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewUmlServiceHandler(svc UmlServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	umlServiceFromHandler := connect.NewClientStreamHandler(
		UmlServiceFromProcedure,
		svc.From,
		connect.WithSchema(umlServiceFromMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	umlServiceGenHandler := connect.NewServerStreamHandler(
		UmlServiceGenProcedure,
		svc.Gen,
		connect.WithSchema(umlServiceGenMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/unmango.dev.tdl.v1alpha1.UmlService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case UmlServiceFromProcedure:
			umlServiceFromHandler.ServeHTTP(w, r)
		case UmlServiceGenProcedure:
			umlServiceGenHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedUmlServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedUmlServiceHandler struct{}

func (UnimplementedUmlServiceHandler) From(context.Context, *connect.ClientStream[v1alpha1.FromRequest]) (*connect.Response[v1alpha1.FromResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("unmango.dev.tdl.v1alpha1.UmlService.From is not implemented"))
}

func (UnimplementedUmlServiceHandler) Gen(context.Context, *connect.Request[v1alpha1.GenRequest], *connect.ServerStream[v1alpha1.GenResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("unmango.dev.tdl.v1alpha1.UmlService.Gen is not implemented"))
}
