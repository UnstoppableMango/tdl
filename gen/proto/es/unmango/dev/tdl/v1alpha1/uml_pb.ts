// @generated by protoc-gen-es v1.9.0 with parameter "target=ts,import_extension=none"
// @generated from file unmango/dev/tdl/v1alpha1/uml.proto (package unmango.dev.tdl.v1alpha1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message unmango.dev.tdl.v1alpha1.FromRequest
 */
export class FromRequest extends Message<FromRequest> {
  /**
   * @generated from field: bytes data = 1;
   */
  data = new Uint8Array(0);

  constructor(data?: PartialMessage<FromRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "unmango.dev.tdl.v1alpha1.FromRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FromRequest {
    return new FromRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FromRequest {
    return new FromRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FromRequest {
    return new FromRequest().fromJsonString(jsonString, options);
  }

  static equals(a: FromRequest | PlainMessage<FromRequest> | undefined, b: FromRequest | PlainMessage<FromRequest> | undefined): boolean {
    return proto3.util.equals(FromRequest, a, b);
  }
}

/**
 * @generated from message unmango.dev.tdl.v1alpha1.FromResponse
 */
export class FromResponse extends Message<FromResponse> {
  /**
   * @generated from field: unmango.dev.tdl.v1alpha1.Spec spec = 1;
   */
  spec?: Spec;

  constructor(data?: PartialMessage<FromResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "unmango.dev.tdl.v1alpha1.FromResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "spec", kind: "message", T: Spec },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FromResponse {
    return new FromResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FromResponse {
    return new FromResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FromResponse {
    return new FromResponse().fromJsonString(jsonString, options);
  }

  static equals(a: FromResponse | PlainMessage<FromResponse> | undefined, b: FromResponse | PlainMessage<FromResponse> | undefined): boolean {
    return proto3.util.equals(FromResponse, a, b);
  }
}

/**
 * @generated from message unmango.dev.tdl.v1alpha1.ToRequest
 */
export class ToRequest extends Message<ToRequest> {
  /**
   * @generated from field: unmango.dev.tdl.v1alpha1.Spec spec = 1;
   */
  spec?: Spec;

  constructor(data?: PartialMessage<ToRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "unmango.dev.tdl.v1alpha1.ToRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "spec", kind: "message", T: Spec },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ToRequest {
    return new ToRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ToRequest {
    return new ToRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ToRequest {
    return new ToRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ToRequest | PlainMessage<ToRequest> | undefined, b: ToRequest | PlainMessage<ToRequest> | undefined): boolean {
    return proto3.util.equals(ToRequest, a, b);
  }
}

/**
 * @generated from message unmango.dev.tdl.v1alpha1.ToResponse
 */
export class ToResponse extends Message<ToResponse> {
  /**
   * @generated from field: bytes data = 1;
   */
  data = new Uint8Array(0);

  constructor(data?: PartialMessage<ToResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "unmango.dev.tdl.v1alpha1.ToResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ToResponse {
    return new ToResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ToResponse {
    return new ToResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ToResponse {
    return new ToResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ToResponse | PlainMessage<ToResponse> | undefined, b: ToResponse | PlainMessage<ToResponse> | undefined): boolean {
    return proto3.util.equals(ToResponse, a, b);
  }
}

/**
 * @generated from message unmango.dev.tdl.v1alpha1.Spec
 */
export class Spec extends Message<Spec> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string repository = 2;
   */
  repository = "";

  /**
   * @generated from field: string version = 3;
   */
  version = "";

  /**
   * @generated from field: string display_name = 4;
   */
  displayName = "";

  /**
   * @generated from field: string description = 5;
   */
  description = "";

  /**
   * @generated from field: repeated string tags = 6;
   */
  tags: string[] = [];

  /**
   * @generated from field: map<string, unmango.dev.tdl.v1alpha1.Type> types = 7;
   */
  types: { [key: string]: Type } = {};

  constructor(data?: PartialMessage<Spec>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "unmango.dev.tdl.v1alpha1.Spec";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "repository", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "display_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "tags", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 7, name: "types", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: Type} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Spec {
    return new Spec().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Spec {
    return new Spec().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Spec {
    return new Spec().fromJsonString(jsonString, options);
  }

  static equals(a: Spec | PlainMessage<Spec> | undefined, b: Spec | PlainMessage<Spec> | undefined): boolean {
    return proto3.util.equals(Spec, a, b);
  }
}

/**
 * @generated from message unmango.dev.tdl.v1alpha1.Type
 */
export class Type extends Message<Type> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  constructor(data?: PartialMessage<Type>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "unmango.dev.tdl.v1alpha1.Type";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Type {
    return new Type().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Type {
    return new Type().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Type {
    return new Type().fromJsonString(jsonString, options);
  }

  static equals(a: Type | PlainMessage<Type> | undefined, b: Type | PlainMessage<Type> | undefined): boolean {
    return proto3.util.equals(Type, a, b);
  }
}

