// @generated by protoc-gen-es v1.10.0 with parameter "target=ts,import_extension=none"
// @generated from file unmango/dev/tdl/v1alpha1/uml.proto (package unmango.dev.tdl.v1alpha1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Any, Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message unmango.dev.tdl.v1alpha1.FromRequest
 */
export class FromRequest extends Message<FromRequest> {
  /**
   * @generated from field: bytes data = 1;
   */
  data = new Uint8Array(0);

  /**
   * @generated from field: string source = 2;
   */
  source = "";

  constructor(data?: PartialMessage<FromRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "unmango.dev.tdl.v1alpha1.FromRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "source", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FromRequest {
    return new FromRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FromRequest {
    return new FromRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FromRequest {
    return new FromRequest().fromJsonString(jsonString, options);
  }

  static equals(a: FromRequest | PlainMessage<FromRequest> | undefined, b: FromRequest | PlainMessage<FromRequest> | undefined): boolean {
    return proto3.util.equals(FromRequest, a, b);
  }
}

/**
 * @generated from message unmango.dev.tdl.v1alpha1.FromResponse
 */
export class FromResponse extends Message<FromResponse> {
  /**
   * @generated from field: unmango.dev.tdl.v1alpha1.Spec spec = 1;
   */
  spec?: Spec;

  constructor(data?: PartialMessage<FromResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "unmango.dev.tdl.v1alpha1.FromResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "spec", kind: "message", T: Spec },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FromResponse {
    return new FromResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FromResponse {
    return new FromResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FromResponse {
    return new FromResponse().fromJsonString(jsonString, options);
  }

  static equals(a: FromResponse | PlainMessage<FromResponse> | undefined, b: FromResponse | PlainMessage<FromResponse> | undefined): boolean {
    return proto3.util.equals(FromResponse, a, b);
  }
}

/**
 * @generated from message unmango.dev.tdl.v1alpha1.GenRequest
 */
export class GenRequest extends Message<GenRequest> {
  /**
   * @generated from field: unmango.dev.tdl.v1alpha1.Spec spec = 1;
   */
  spec?: Spec;

  /**
   * @generated from field: string target = 2;
   */
  target = "";

  constructor(data?: PartialMessage<GenRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "unmango.dev.tdl.v1alpha1.GenRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "spec", kind: "message", T: Spec },
    { no: 2, name: "target", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GenRequest {
    return new GenRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GenRequest {
    return new GenRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GenRequest {
    return new GenRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GenRequest | PlainMessage<GenRequest> | undefined, b: GenRequest | PlainMessage<GenRequest> | undefined): boolean {
    return proto3.util.equals(GenRequest, a, b);
  }
}

/**
 * @generated from message unmango.dev.tdl.v1alpha1.GenResponse
 */
export class GenResponse extends Message<GenResponse> {
  /**
   * @generated from field: bytes data = 1;
   */
  data = new Uint8Array(0);

  constructor(data?: PartialMessage<GenResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "unmango.dev.tdl.v1alpha1.GenResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GenResponse {
    return new GenResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GenResponse {
    return new GenResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GenResponse {
    return new GenResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GenResponse | PlainMessage<GenResponse> | undefined, b: GenResponse | PlainMessage<GenResponse> | undefined): boolean {
    return proto3.util.equals(GenResponse, a, b);
  }
}

/**
 * @generated from message unmango.dev.tdl.v1alpha1.Spec
 */
export class Spec extends Message<Spec> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string source = 2;
   */
  source = "";

  /**
   * @generated from field: string version = 3;
   */
  version = "";

  /**
   * @generated from field: string display_name = 4;
   */
  displayName = "";

  /**
   * @generated from field: string description = 5;
   */
  description = "";

  /**
   * @generated from field: map<string, string> labels = 6;
   */
  labels: { [key: string]: string } = {};

  /**
   * @generated from field: map<string, unmango.dev.tdl.v1alpha1.Type> types = 7;
   */
  types: { [key: string]: Type } = {};

  /**
   * @generated from field: map<string, unmango.dev.tdl.v1alpha1.Function> functions = 8;
   */
  functions: { [key: string]: Function } = {};

  /**
   * @generated from field: map<string, google.protobuf.Any> meta = 128;
   */
  meta: { [key: string]: Any } = {};

  constructor(data?: PartialMessage<Spec>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "unmango.dev.tdl.v1alpha1.Spec";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "source", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "display_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "labels", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
    { no: 7, name: "types", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: Type} },
    { no: 8, name: "functions", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: Function} },
    { no: 128, name: "meta", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: Any} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Spec {
    return new Spec().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Spec {
    return new Spec().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Spec {
    return new Spec().fromJsonString(jsonString, options);
  }

  static equals(a: Spec | PlainMessage<Spec> | undefined, b: Spec | PlainMessage<Spec> | undefined): boolean {
    return proto3.util.equals(Spec, a, b);
  }
}

/**
 * @generated from message unmango.dev.tdl.v1alpha1.Type
 */
export class Type extends Message<Type> {
  /**
   * @generated from field: string type = 1;
   */
  type = "";

  /**
   * @generated from field: map<string, unmango.dev.tdl.v1alpha1.Field> fields = 2;
   */
  fields: { [key: string]: Field } = {};

  /**
   * @generated from field: map<string, unmango.dev.tdl.v1alpha1.Function> methods = 3;
   */
  methods: { [key: string]: Function } = {};

  /**
   * @generated from field: map<string, unmango.dev.tdl.v1alpha1.GenericParameter> generic_parameters = 4;
   */
  genericParameters: { [key: string]: GenericParameter } = {};

  /**
   * @generated from field: optional unmango.dev.tdl.v1alpha1.Constructor constructor = 5;
   */
  constructor$?: Constructor;

  /**
   * @generated from field: map<string, google.protobuf.Any> meta = 128;
   */
  meta: { [key: string]: Any } = {};

  constructor(data?: PartialMessage<Type>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "unmango.dev.tdl.v1alpha1.Type";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "fields", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: Field} },
    { no: 3, name: "methods", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: Function} },
    { no: 4, name: "generic_parameters", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: GenericParameter} },
    { no: 5, name: "constructor", kind: "message", T: Constructor, opt: true },
    { no: 128, name: "meta", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: Any} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Type {
    return new Type().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Type {
    return new Type().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Type {
    return new Type().fromJsonString(jsonString, options);
  }

  static equals(a: Type | PlainMessage<Type> | undefined, b: Type | PlainMessage<Type> | undefined): boolean {
    return proto3.util.equals(Type, a, b);
  }
}

/**
 * @generated from message unmango.dev.tdl.v1alpha1.Field
 */
export class Field extends Message<Field> {
  /**
   * @generated from field: string type = 1;
   */
  type = "";

  /**
   * @generated from field: bool readonly = 2;
   */
  readonly = false;

  /**
   * @generated from field: map<string, google.protobuf.Any> meta = 128;
   */
  meta: { [key: string]: Any } = {};

  constructor(data?: PartialMessage<Field>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "unmango.dev.tdl.v1alpha1.Field";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "readonly", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 128, name: "meta", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: Any} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Field {
    return new Field().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Field {
    return new Field().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Field {
    return new Field().fromJsonString(jsonString, options);
  }

  static equals(a: Field | PlainMessage<Field> | undefined, b: Field | PlainMessage<Field> | undefined): boolean {
    return proto3.util.equals(Field, a, b);
  }
}

/**
 * @generated from message unmango.dev.tdl.v1alpha1.Function
 */
export class Function extends Message<Function> {
  /**
   * @generated from field: unmango.dev.tdl.v1alpha1.Type return_type = 1;
   */
  returnType?: Type;

  /**
   * @generated from field: map<string, unmango.dev.tdl.v1alpha1.Type> parameters = 2;
   */
  parameters: { [key: string]: Type } = {};

  /**
   * @generated from field: map<string, unmango.dev.tdl.v1alpha1.GenericParameter> generic_parameters = 3;
   */
  genericParameters: { [key: string]: GenericParameter } = {};

  /**
   * @generated from field: map<string, google.protobuf.Any> meta = 128;
   */
  meta: { [key: string]: Any } = {};

  constructor(data?: PartialMessage<Function>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "unmango.dev.tdl.v1alpha1.Function";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "return_type", kind: "message", T: Type },
    { no: 2, name: "parameters", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: Type} },
    { no: 3, name: "generic_parameters", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: GenericParameter} },
    { no: 128, name: "meta", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: Any} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Function {
    return new Function().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Function {
    return new Function().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Function {
    return new Function().fromJsonString(jsonString, options);
  }

  static equals(a: Function | PlainMessage<Function> | undefined, b: Function | PlainMessage<Function> | undefined): boolean {
    return proto3.util.equals(Function, a, b);
  }
}

/**
 * @generated from message unmango.dev.tdl.v1alpha1.GenericParameter
 */
export class GenericParameter extends Message<GenericParameter> {
  /**
   * @generated from field: repeated unmango.dev.tdl.v1alpha1.Modifier modifiers = 1;
   */
  modifiers: Modifier[] = [];

  /**
   * @generated from field: map<string, google.protobuf.Any> meta = 128;
   */
  meta: { [key: string]: Any } = {};

  constructor(data?: PartialMessage<GenericParameter>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "unmango.dev.tdl.v1alpha1.GenericParameter";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "modifiers", kind: "message", T: Modifier, repeated: true },
    { no: 128, name: "meta", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: Any} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GenericParameter {
    return new GenericParameter().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GenericParameter {
    return new GenericParameter().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GenericParameter {
    return new GenericParameter().fromJsonString(jsonString, options);
  }

  static equals(a: GenericParameter | PlainMessage<GenericParameter> | undefined, b: GenericParameter | PlainMessage<GenericParameter> | undefined): boolean {
    return proto3.util.equals(GenericParameter, a, b);
  }
}

/**
 * @generated from message unmango.dev.tdl.v1alpha1.Modifier
 */
export class Modifier extends Message<Modifier> {
  /**
   * @generated from field: map<string, google.protobuf.Any> meta = 128;
   */
  meta: { [key: string]: Any } = {};

  constructor(data?: PartialMessage<Modifier>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "unmango.dev.tdl.v1alpha1.Modifier";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 128, name: "meta", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: Any} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Modifier {
    return new Modifier().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Modifier {
    return new Modifier().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Modifier {
    return new Modifier().fromJsonString(jsonString, options);
  }

  static equals(a: Modifier | PlainMessage<Modifier> | undefined, b: Modifier | PlainMessage<Modifier> | undefined): boolean {
    return proto3.util.equals(Modifier, a, b);
  }
}

/**
 * @generated from message unmango.dev.tdl.v1alpha1.Constructor
 */
export class Constructor extends Message<Constructor> {
  /**
   * @generated from field: map<string, unmango.dev.tdl.v1alpha1.Type> parameters = 1;
   */
  parameters: { [key: string]: Type } = {};

  /**
   * @generated from field: map<string, google.protobuf.Any> meta = 128;
   */
  meta: { [key: string]: Any } = {};

  constructor(data?: PartialMessage<Constructor>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "unmango.dev.tdl.v1alpha1.Constructor";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "parameters", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: Type} },
    { no: 128, name: "meta", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: Any} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Constructor {
    return new Constructor().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Constructor {
    return new Constructor().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Constructor {
    return new Constructor().fromJsonString(jsonString, options);
  }

  static equals(a: Constructor | PlainMessage<Constructor> | undefined, b: Constructor | PlainMessage<Constructor> | undefined): boolean {
    return proto3.util.equals(Constructor, a, b);
  }
}

