// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: greet.proto

package _goconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	_go "github.com/unstoppablemango/tdl/gen/go"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// GreeterName is the fully-qualified name of the Greeter service.
	GreeterName = "greet.Greeter"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// GreeterSayHelloProcedure is the fully-qualified name of the Greeter's SayHello RPC.
	GreeterSayHelloProcedure = "/greet.Greeter/SayHello"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	greeterServiceDescriptor        = _go.File_greet_proto.Services().ByName("Greeter")
	greeterSayHelloMethodDescriptor = greeterServiceDescriptor.Methods().ByName("SayHello")
)

// GreeterClient is a client for the greet.Greeter service.
type GreeterClient interface {
	// Sends a greeting
	SayHello(context.Context, *connect.Request[_go.HelloRequest]) (*connect.Response[_go.HelloReply], error)
}

// NewGreeterClient constructs a client for the greet.Greeter service. By default, it uses the
// Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewGreeterClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) GreeterClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &greeterClient{
		sayHello: connect.NewClient[_go.HelloRequest, _go.HelloReply](
			httpClient,
			baseURL+GreeterSayHelloProcedure,
			connect.WithSchema(greeterSayHelloMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// greeterClient implements GreeterClient.
type greeterClient struct {
	sayHello *connect.Client[_go.HelloRequest, _go.HelloReply]
}

// SayHello calls greet.Greeter.SayHello.
func (c *greeterClient) SayHello(ctx context.Context, req *connect.Request[_go.HelloRequest]) (*connect.Response[_go.HelloReply], error) {
	return c.sayHello.CallUnary(ctx, req)
}

// GreeterHandler is an implementation of the greet.Greeter service.
type GreeterHandler interface {
	// Sends a greeting
	SayHello(context.Context, *connect.Request[_go.HelloRequest]) (*connect.Response[_go.HelloReply], error)
}

// NewGreeterHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewGreeterHandler(svc GreeterHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	greeterSayHelloHandler := connect.NewUnaryHandler(
		GreeterSayHelloProcedure,
		svc.SayHello,
		connect.WithSchema(greeterSayHelloMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/greet.Greeter/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case GreeterSayHelloProcedure:
			greeterSayHelloHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedGreeterHandler returns CodeUnimplemented from all methods.
type UnimplementedGreeterHandler struct{}

func (UnimplementedGreeterHandler) SayHello(context.Context, *connect.Request[_go.HelloRequest]) (*connect.Response[_go.HelloReply], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("greet.Greeter.SayHello is not implemented"))
}
