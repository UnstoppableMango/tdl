// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: unmango/dev/tdl/v1alpha1/ast.proto

package tdlv1alpha1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1alpha1 "github.com/unstoppablemango/tdl/pkg/unmango/dev/tdl/v1alpha1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ParserName is the fully-qualified name of the Parser service.
	ParserName = "unmango.dev.tdl.v1alpha1.Parser"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ParserParseProcedure is the fully-qualified name of the Parser's Parse RPC.
	ParserParseProcedure = "/unmango.dev.tdl.v1alpha1.Parser/Parse"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	parserServiceDescriptor     = v1alpha1.File_unmango_dev_tdl_v1alpha1_ast_proto.Services().ByName("Parser")
	parserParseMethodDescriptor = parserServiceDescriptor.Methods().ByName("Parse")
)

// ParserClient is a client for the unmango.dev.tdl.v1alpha1.Parser service.
type ParserClient interface {
	Parse(context.Context, *connect.Request[v1alpha1.ParseRequest]) (*connect.Response[v1alpha1.ParseResponse], error)
}

// NewParserClient constructs a client for the unmango.dev.tdl.v1alpha1.Parser service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewParserClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ParserClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &parserClient{
		parse: connect.NewClient[v1alpha1.ParseRequest, v1alpha1.ParseResponse](
			httpClient,
			baseURL+ParserParseProcedure,
			connect.WithSchema(parserParseMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// parserClient implements ParserClient.
type parserClient struct {
	parse *connect.Client[v1alpha1.ParseRequest, v1alpha1.ParseResponse]
}

// Parse calls unmango.dev.tdl.v1alpha1.Parser.Parse.
func (c *parserClient) Parse(ctx context.Context, req *connect.Request[v1alpha1.ParseRequest]) (*connect.Response[v1alpha1.ParseResponse], error) {
	return c.parse.CallUnary(ctx, req)
}

// ParserHandler is an implementation of the unmango.dev.tdl.v1alpha1.Parser service.
type ParserHandler interface {
	Parse(context.Context, *connect.Request[v1alpha1.ParseRequest]) (*connect.Response[v1alpha1.ParseResponse], error)
}

// NewParserHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewParserHandler(svc ParserHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	parserParseHandler := connect.NewUnaryHandler(
		ParserParseProcedure,
		svc.Parse,
		connect.WithSchema(parserParseMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/unmango.dev.tdl.v1alpha1.Parser/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ParserParseProcedure:
			parserParseHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedParserHandler returns CodeUnimplemented from all methods.
type UnimplementedParserHandler struct{}

func (UnimplementedParserHandler) Parse(context.Context, *connect.Request[v1alpha1.ParseRequest]) (*connect.Response[v1alpha1.ParseResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("unmango.dev.tdl.v1alpha1.Parser.Parse is not implemented"))
}
