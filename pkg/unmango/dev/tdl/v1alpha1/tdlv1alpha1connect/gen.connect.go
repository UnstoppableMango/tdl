// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: unmango/dev/tdl/v1alpha1/gen.proto

package tdlv1alpha1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1alpha1 "github.com/unstoppablemango/tdl/pkg/unmango/dev/tdl/v1alpha1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// GenServiceName is the fully-qualified name of the GenService service.
	GenServiceName = "unmango.dev.tdl.v1alpha1.GenService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// GenServiceGenProcedure is the fully-qualified name of the GenService's Gen RPC.
	GenServiceGenProcedure = "/unmango.dev.tdl.v1alpha1.GenService/Gen"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	genServiceServiceDescriptor   = v1alpha1.File_unmango_dev_tdl_v1alpha1_gen_proto.Services().ByName("GenService")
	genServiceGenMethodDescriptor = genServiceServiceDescriptor.Methods().ByName("Gen")
)

// GenServiceClient is a client for the unmango.dev.tdl.v1alpha1.GenService service.
type GenServiceClient interface {
	Gen(context.Context, *connect.Request[v1alpha1.GenRequest]) (*connect.Response[v1alpha1.GenResponse], error)
}

// NewGenServiceClient constructs a client for the unmango.dev.tdl.v1alpha1.GenService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewGenServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) GenServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &genServiceClient{
		gen: connect.NewClient[v1alpha1.GenRequest, v1alpha1.GenResponse](
			httpClient,
			baseURL+GenServiceGenProcedure,
			connect.WithSchema(genServiceGenMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// genServiceClient implements GenServiceClient.
type genServiceClient struct {
	gen *connect.Client[v1alpha1.GenRequest, v1alpha1.GenResponse]
}

// Gen calls unmango.dev.tdl.v1alpha1.GenService.Gen.
func (c *genServiceClient) Gen(ctx context.Context, req *connect.Request[v1alpha1.GenRequest]) (*connect.Response[v1alpha1.GenResponse], error) {
	return c.gen.CallUnary(ctx, req)
}

// GenServiceHandler is an implementation of the unmango.dev.tdl.v1alpha1.GenService service.
type GenServiceHandler interface {
	Gen(context.Context, *connect.Request[v1alpha1.GenRequest]) (*connect.Response[v1alpha1.GenResponse], error)
}

// NewGenServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewGenServiceHandler(svc GenServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	genServiceGenHandler := connect.NewUnaryHandler(
		GenServiceGenProcedure,
		svc.Gen,
		connect.WithSchema(genServiceGenMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/unmango.dev.tdl.v1alpha1.GenService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case GenServiceGenProcedure:
			genServiceGenHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedGenServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedGenServiceHandler struct{}

func (UnimplementedGenServiceHandler) Gen(context.Context, *connect.Request[v1alpha1.GenRequest]) (*connect.Response[v1alpha1.GenResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("unmango.dev.tdl.v1alpha1.GenService.Gen is not implemented"))
}
