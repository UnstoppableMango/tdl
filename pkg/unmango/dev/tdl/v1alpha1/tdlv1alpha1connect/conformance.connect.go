// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: unmango/dev/tdl/v1alpha1/conformance.proto

package tdlv1alpha1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1alpha1 "github.com/unstoppablemango/tdl/pkg/unmango/dev/tdl/v1alpha1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ConformanceServiceName is the fully-qualified name of the ConformanceService service.
	ConformanceServiceName = "unmango.dev.tdl.v1alpha1.ConformanceService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ConformanceServiceTestProcedure is the fully-qualified name of the ConformanceService's Test RPC.
	ConformanceServiceTestProcedure = "/unmango.dev.tdl.v1alpha1.ConformanceService/Test"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	conformanceServiceServiceDescriptor    = v1alpha1.File_unmango_dev_tdl_v1alpha1_conformance_proto.Services().ByName("ConformanceService")
	conformanceServiceTestMethodDescriptor = conformanceServiceServiceDescriptor.Methods().ByName("Test")
)

// ConformanceServiceClient is a client for the unmango.dev.tdl.v1alpha1.ConformanceService service.
type ConformanceServiceClient interface {
	Test(context.Context, *connect.Request[v1alpha1.TestRequest]) (*connect.Response[v1alpha1.TestResponse], error)
}

// NewConformanceServiceClient constructs a client for the
// unmango.dev.tdl.v1alpha1.ConformanceService service. By default, it uses the Connect protocol
// with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed requests. To
// use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or connect.WithGRPCWeb()
// options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewConformanceServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ConformanceServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &conformanceServiceClient{
		test: connect.NewClient[v1alpha1.TestRequest, v1alpha1.TestResponse](
			httpClient,
			baseURL+ConformanceServiceTestProcedure,
			connect.WithSchema(conformanceServiceTestMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// conformanceServiceClient implements ConformanceServiceClient.
type conformanceServiceClient struct {
	test *connect.Client[v1alpha1.TestRequest, v1alpha1.TestResponse]
}

// Test calls unmango.dev.tdl.v1alpha1.ConformanceService.Test.
func (c *conformanceServiceClient) Test(ctx context.Context, req *connect.Request[v1alpha1.TestRequest]) (*connect.Response[v1alpha1.TestResponse], error) {
	return c.test.CallUnary(ctx, req)
}

// ConformanceServiceHandler is an implementation of the unmango.dev.tdl.v1alpha1.ConformanceService
// service.
type ConformanceServiceHandler interface {
	Test(context.Context, *connect.Request[v1alpha1.TestRequest]) (*connect.Response[v1alpha1.TestResponse], error)
}

// NewConformanceServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewConformanceServiceHandler(svc ConformanceServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	conformanceServiceTestHandler := connect.NewUnaryHandler(
		ConformanceServiceTestProcedure,
		svc.Test,
		connect.WithSchema(conformanceServiceTestMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/unmango.dev.tdl.v1alpha1.ConformanceService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ConformanceServiceTestProcedure:
			conformanceServiceTestHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedConformanceServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedConformanceServiceHandler struct{}

func (UnimplementedConformanceServiceHandler) Test(context.Context, *connect.Request[v1alpha1.TestRequest]) (*connect.Response[v1alpha1.TestResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("unmango.dev.tdl.v1alpha1.ConformanceService.Test is not implemented"))
}
